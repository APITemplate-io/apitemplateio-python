# coding: utf-8

"""
    APITemplate.io API Reference

    # Introduction   Welcome to the [APITemplate.io](https://apitemplate.io) API v2!  APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).  This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.  Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.  **Steps to produce PDFs/Images** 1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it. 2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content. 3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.  # Authentication Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the \"API Integration\" section).  To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.   # Content Type and CORS  **Request Content-Type** The Content-Type for POST and GET requests is set to application/json.  **Cross-Origin Resource Sharing** This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.    # Regional API endpoint(s) A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.  The regions are:  | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       | | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       | | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       | | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |   Alternative Regions: | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       | | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       | | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |  ** Note: - Payload size applies to request and response - If \"export_type\" is set to `json` which output file that on AWS S3 doesn't have the limitation - If the \"export_type\" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region    Other regions are available on request, contact us at hello@apitemplate.io for more information  # Rate limiting Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.  However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests. 

    The version of the OpenAPI document: Version 2.0
    Contact: hello@apitemplate.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr

from typing import Any, Dict, Optional

from APITemplateio.models.create_pdf_from_html_request import CreatePdfFromHtmlRequest
from APITemplateio.models.create_pdf_from_url_request import CreatePdfFromUrlRequest
from APITemplateio.models.response_success_delete_object import ResponseSuccessDeleteObject
from APITemplateio.models.response_success_image_file import ResponseSuccessImageFile
from APITemplateio.models.response_success_list_objects import ResponseSuccessListObjects
from APITemplateio.models.response_success_pdf_file import ResponseSuccessPDFFile

from APITemplateio.api_client import ApiClient
from APITemplateio.api_response import ApiResponse
from APITemplateio.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class APIIntegrationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_image(self, template_id : Annotated[StrictStr, Field(..., description="Your template id, it can be obtained in the web console")], body : Dict[str, Any], output_image_type : Annotated[Optional[StrictStr], Field(description="- Output image type(JPEG or PNG format), default to `all`. Options are `all`, `jpegOnly`,`pngOnly`. ")] = None, expiration : Annotated[Optional[StrictInt], Field(description="- Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF ")] = None, cloud_storage : Annotated[Optional[StrictInt], Field(description="- Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. ")] = None, postaction_s3_filekey : Annotated[Optional[StrictStr], Field(description="- This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter ")] = None, postaction_s3_bucket : Annotated[Optional[StrictStr], Field(description="- This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. ")] = None, meta : Annotated[Optional[StrictStr], Field(description="- Specify an external reference ID for your own reference. It appears in the `list-objects` API. ")] = None, **kwargs) -> ResponseSuccessImageFile:  # noqa: E501
        """Create an Image  # noqa: E501

        This endpoint creates a JPEG file(along with PNG) with JSON data and your template   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_image(template_id, body, output_image_type, expiration, cloud_storage, postaction_s3_filekey, postaction_s3_bucket, meta, async_req=True)
        >>> result = thread.get()

        :param template_id: Your template id, it can be obtained in the web console (required)
        :type template_id: str
        :param body: (required)
        :type body: object
        :param output_image_type: - Output image type(JPEG or PNG format), default to `all`. Options are `all`, `jpegOnly`,`pngOnly`. 
        :type output_image_type: str
        :param expiration: - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
        :type expiration: int
        :param cloud_storage: - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
        :type cloud_storage: int
        :param postaction_s3_filekey: - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
        :type postaction_s3_filekey: str
        :param postaction_s3_bucket: - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
        :type postaction_s3_bucket: str
        :param meta: - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
        :type meta: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResponseSuccessImageFile
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_image_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_image_with_http_info(template_id, body, output_image_type, expiration, cloud_storage, postaction_s3_filekey, postaction_s3_bucket, meta, **kwargs)  # noqa: E501

    @validate_arguments
    def create_image_with_http_info(self, template_id : Annotated[StrictStr, Field(..., description="Your template id, it can be obtained in the web console")], body : Dict[str, Any], output_image_type : Annotated[Optional[StrictStr], Field(description="- Output image type(JPEG or PNG format), default to `all`. Options are `all`, `jpegOnly`,`pngOnly`. ")] = None, expiration : Annotated[Optional[StrictInt], Field(description="- Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF ")] = None, cloud_storage : Annotated[Optional[StrictInt], Field(description="- Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. ")] = None, postaction_s3_filekey : Annotated[Optional[StrictStr], Field(description="- This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter ")] = None, postaction_s3_bucket : Annotated[Optional[StrictStr], Field(description="- This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. ")] = None, meta : Annotated[Optional[StrictStr], Field(description="- Specify an external reference ID for your own reference. It appears in the `list-objects` API. ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create an Image  # noqa: E501

        This endpoint creates a JPEG file(along with PNG) with JSON data and your template   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_image_with_http_info(template_id, body, output_image_type, expiration, cloud_storage, postaction_s3_filekey, postaction_s3_bucket, meta, async_req=True)
        >>> result = thread.get()

        :param template_id: Your template id, it can be obtained in the web console (required)
        :type template_id: str
        :param body: (required)
        :type body: object
        :param output_image_type: - Output image type(JPEG or PNG format), default to `all`. Options are `all`, `jpegOnly`,`pngOnly`. 
        :type output_image_type: str
        :param expiration: - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
        :type expiration: int
        :param cloud_storage: - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
        :type cloud_storage: int
        :param postaction_s3_filekey: - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
        :type postaction_s3_filekey: str
        :param postaction_s3_bucket: - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
        :type postaction_s3_bucket: str
        :param meta: - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
        :type meta: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResponseSuccessImageFile, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'template_id',
            'body',
            'output_image_type',
            'expiration',
            'cloud_storage',
            'postaction_s3_filekey',
            'postaction_s3_bucket',
            'meta'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_image" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('template_id') is not None:  # noqa: E501
            _query_params.append(('template_id', _params['template_id']))

        if _params.get('output_image_type') is not None:  # noqa: E501
            _query_params.append(('output_image_type', _params['output_image_type']))

        if _params.get('expiration') is not None:  # noqa: E501
            _query_params.append(('expiration', _params['expiration']))

        if _params.get('cloud_storage') is not None:  # noqa: E501
            _query_params.append(('cloud_storage', _params['cloud_storage']))

        if _params.get('postaction_s3_filekey') is not None:  # noqa: E501
            _query_params.append(('postaction_s3_filekey', _params['postaction_s3_filekey']))

        if _params.get('postaction_s3_bucket') is not None:  # noqa: E501
            _query_params.append(('postaction_s3_bucket', _params['postaction_s3_bucket']))

        if _params.get('meta') is not None:  # noqa: E501
            _query_params.append(('meta', _params['meta']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResponseSuccessImageFile",
        }

        return self.api_client.call_api(
            '/v2/create-image', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_pdf(self, template_id : Annotated[StrictStr, Field(..., description="Your template id, it can be obtained in the web console")], body : Dict[str, Any], export_type : Annotated[Optional[StrictStr], Field(description="- Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. ")] = None, expiration : Annotated[Optional[StrictInt], Field(description="- Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF ")] = None, output_html : Annotated[Optional[StrictStr], Field(description="- Either `1` or `0`(Default). - To enable output of html content, set the value to `1` and it will return in the JSON response as html_url field (as a URL) ")] = None, output_format : Annotated[Optional[StrictStr], Field(description="- Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). ")] = None, filename : Annotated[Optional[StrictStr], Field(description="- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` ")] = None, image_resample_res : Annotated[Optional[StrictStr], Field(description="- We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. ")] = None, is_cmyk : Annotated[Optional[StrictStr], Field(description="- Use CMYK color profile, 1=true, 0=false. Default to '0' ")] = None, cloud_storage : Annotated[Optional[StrictInt], Field(description="- Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. ")] = None, pdf_standard : Annotated[Optional[StrictStr], Field(description="Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) ")] = None, postaction_s3_filekey : Annotated[Optional[StrictStr], Field(description="- This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter ")] = None, postaction_s3_bucket : Annotated[Optional[StrictStr], Field(description="- This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. ")] = None, meta : Annotated[Optional[StrictStr], Field(description="- Specify an external reference ID for your own reference. It appears in the `list-objects` API. ")] = None, var_async : Annotated[Optional[StrictStr], Field(description="- Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory ")] = None, webhook_url : Annotated[Optional[StrictStr], Field(description="- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success ")] = None, **kwargs) -> ResponseSuccessPDFFile:  # noqa: E501
        """Create a PDF  # noqa: E501

        This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pdf(template_id, body, export_type, expiration, output_html, output_format, filename, image_resample_res, is_cmyk, cloud_storage, pdf_standard, postaction_s3_filekey, postaction_s3_bucket, meta, var_async, webhook_url, async_req=True)
        >>> result = thread.get()

        :param template_id: Your template id, it can be obtained in the web console (required)
        :type template_id: str
        :param body: (required)
        :type body: object
        :param export_type: - Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. 
        :type export_type: str
        :param expiration: - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
        :type expiration: int
        :param output_html: - Either `1` or `0`(Default). - To enable output of html content, set the value to `1` and it will return in the JSON response as html_url field (as a URL) 
        :type output_html: str
        :param output_format: - Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). 
        :type output_format: str
        :param filename: - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` 
        :type filename: str
        :param image_resample_res: - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. 
        :type image_resample_res: str
        :param is_cmyk: - Use CMYK color profile, 1=true, 0=false. Default to '0' 
        :type is_cmyk: str
        :param cloud_storage: - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
        :type cloud_storage: int
        :param pdf_standard: Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) 
        :type pdf_standard: str
        :param postaction_s3_filekey: - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
        :type postaction_s3_filekey: str
        :param postaction_s3_bucket: - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
        :type postaction_s3_bucket: str
        :param meta: - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
        :type meta: str
        :param var_async: - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory 
        :type var_async: str
        :param webhook_url: - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success 
        :type webhook_url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResponseSuccessPDFFile
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_pdf_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_pdf_with_http_info(template_id, body, export_type, expiration, output_html, output_format, filename, image_resample_res, is_cmyk, cloud_storage, pdf_standard, postaction_s3_filekey, postaction_s3_bucket, meta, var_async, webhook_url, **kwargs)  # noqa: E501

    @validate_arguments
    def create_pdf_with_http_info(self, template_id : Annotated[StrictStr, Field(..., description="Your template id, it can be obtained in the web console")], body : Dict[str, Any], export_type : Annotated[Optional[StrictStr], Field(description="- Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. ")] = None, expiration : Annotated[Optional[StrictInt], Field(description="- Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF ")] = None, output_html : Annotated[Optional[StrictStr], Field(description="- Either `1` or `0`(Default). - To enable output of html content, set the value to `1` and it will return in the JSON response as html_url field (as a URL) ")] = None, output_format : Annotated[Optional[StrictStr], Field(description="- Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). ")] = None, filename : Annotated[Optional[StrictStr], Field(description="- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` ")] = None, image_resample_res : Annotated[Optional[StrictStr], Field(description="- We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. ")] = None, is_cmyk : Annotated[Optional[StrictStr], Field(description="- Use CMYK color profile, 1=true, 0=false. Default to '0' ")] = None, cloud_storage : Annotated[Optional[StrictInt], Field(description="- Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. ")] = None, pdf_standard : Annotated[Optional[StrictStr], Field(description="Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) ")] = None, postaction_s3_filekey : Annotated[Optional[StrictStr], Field(description="- This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter ")] = None, postaction_s3_bucket : Annotated[Optional[StrictStr], Field(description="- This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. ")] = None, meta : Annotated[Optional[StrictStr], Field(description="- Specify an external reference ID for your own reference. It appears in the `list-objects` API. ")] = None, var_async : Annotated[Optional[StrictStr], Field(description="- Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory ")] = None, webhook_url : Annotated[Optional[StrictStr], Field(description="- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a PDF  # noqa: E501

        This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pdf_with_http_info(template_id, body, export_type, expiration, output_html, output_format, filename, image_resample_res, is_cmyk, cloud_storage, pdf_standard, postaction_s3_filekey, postaction_s3_bucket, meta, var_async, webhook_url, async_req=True)
        >>> result = thread.get()

        :param template_id: Your template id, it can be obtained in the web console (required)
        :type template_id: str
        :param body: (required)
        :type body: object
        :param export_type: - Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. 
        :type export_type: str
        :param expiration: - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
        :type expiration: int
        :param output_html: - Either `1` or `0`(Default). - To enable output of html content, set the value to `1` and it will return in the JSON response as html_url field (as a URL) 
        :type output_html: str
        :param output_format: - Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). 
        :type output_format: str
        :param filename: - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` 
        :type filename: str
        :param image_resample_res: - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. 
        :type image_resample_res: str
        :param is_cmyk: - Use CMYK color profile, 1=true, 0=false. Default to '0' 
        :type is_cmyk: str
        :param cloud_storage: - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
        :type cloud_storage: int
        :param pdf_standard: Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) 
        :type pdf_standard: str
        :param postaction_s3_filekey: - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
        :type postaction_s3_filekey: str
        :param postaction_s3_bucket: - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
        :type postaction_s3_bucket: str
        :param meta: - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
        :type meta: str
        :param var_async: - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory 
        :type var_async: str
        :param webhook_url: - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success 
        :type webhook_url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResponseSuccessPDFFile, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'template_id',
            'body',
            'export_type',
            'expiration',
            'output_html',
            'output_format',
            'filename',
            'image_resample_res',
            'is_cmyk',
            'cloud_storage',
            'pdf_standard',
            'postaction_s3_filekey',
            'postaction_s3_bucket',
            'meta',
            'var_async',
            'webhook_url'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pdf" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('template_id') is not None:  # noqa: E501
            _query_params.append(('template_id', _params['template_id']))

        if _params.get('export_type') is not None:  # noqa: E501
            _query_params.append(('export_type', _params['export_type']))

        if _params.get('expiration') is not None:  # noqa: E501
            _query_params.append(('expiration', _params['expiration']))

        if _params.get('output_html') is not None:  # noqa: E501
            _query_params.append(('output_html', _params['output_html']))

        if _params.get('output_format') is not None:  # noqa: E501
            _query_params.append(('output_format', _params['output_format']))

        if _params.get('filename') is not None:  # noqa: E501
            _query_params.append(('filename', _params['filename']))

        if _params.get('image_resample_res') is not None:  # noqa: E501
            _query_params.append(('image_resample_res', _params['image_resample_res']))

        if _params.get('is_cmyk') is not None:  # noqa: E501
            _query_params.append(('is_cmyk', _params['is_cmyk']))

        if _params.get('cloud_storage') is not None:  # noqa: E501
            _query_params.append(('cloud_storage', _params['cloud_storage']))

        if _params.get('pdf_standard') is not None:  # noqa: E501
            _query_params.append(('pdf_standard', _params['pdf_standard']))

        if _params.get('postaction_s3_filekey') is not None:  # noqa: E501
            _query_params.append(('postaction_s3_filekey', _params['postaction_s3_filekey']))

        if _params.get('postaction_s3_bucket') is not None:  # noqa: E501
            _query_params.append(('postaction_s3_bucket', _params['postaction_s3_bucket']))

        if _params.get('meta') is not None:  # noqa: E501
            _query_params.append(('meta', _params['meta']))

        if _params.get('var_async') is not None:  # noqa: E501
            _query_params.append(('async', _params['var_async']))

        if _params.get('webhook_url') is not None:  # noqa: E501
            _query_params.append(('webhook_url', _params['webhook_url']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResponseSuccessPDFFile",
        }

        return self.api_client.call_api(
            '/v2/create-pdf', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_pdf_from_html(self, create_pdf_from_html_request : CreatePdfFromHtmlRequest, export_type : Annotated[Optional[StrictStr], Field(description="- Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. ")] = None, expiration : Annotated[Optional[StrictInt], Field(description="- Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF ")] = None, output_format : Annotated[Optional[StrictStr], Field(description="- Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). ")] = None, filename : Annotated[Optional[StrictStr], Field(description="- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` ")] = None, image_resample_res : Annotated[Optional[StrictStr], Field(description="- We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. ")] = None, is_cmyk : Annotated[Optional[StrictStr], Field(description="- Use CMYK color profile, 1=true, 0=false. Default to '0' ")] = None, cloud_storage : Annotated[Optional[StrictInt], Field(description="- Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. ")] = None, pdf_standard : Annotated[Optional[StrictStr], Field(description="Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) ")] = None, postaction_s3_filekey : Annotated[Optional[StrictStr], Field(description="- This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter ")] = None, postaction_s3_bucket : Annotated[Optional[StrictStr], Field(description="- This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. ")] = None, meta : Annotated[Optional[StrictStr], Field(description="- Specify an external reference ID for your own reference. It appears in the `list-objects` API. ")] = None, var_async : Annotated[Optional[StrictStr], Field(description="- Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory ")] = None, webhook_url : Annotated[Optional[StrictStr], Field(description="- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success ")] = None, **kwargs) -> ResponseSuccessPDFFile:  # noqa: E501
        """Create a PDF from HTML  # noqa: E501

        - This endpoint creates a PDF file from HTML with JSON data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pdf_from_html(create_pdf_from_html_request, export_type, expiration, output_format, filename, image_resample_res, is_cmyk, cloud_storage, pdf_standard, postaction_s3_filekey, postaction_s3_bucket, meta, var_async, webhook_url, async_req=True)
        >>> result = thread.get()

        :param create_pdf_from_html_request: (required)
        :type create_pdf_from_html_request: CreatePdfFromHtmlRequest
        :param export_type: - Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. 
        :type export_type: str
        :param expiration: - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
        :type expiration: int
        :param output_format: - Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). 
        :type output_format: str
        :param filename: - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` 
        :type filename: str
        :param image_resample_res: - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. 
        :type image_resample_res: str
        :param is_cmyk: - Use CMYK color profile, 1=true, 0=false. Default to '0' 
        :type is_cmyk: str
        :param cloud_storage: - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
        :type cloud_storage: int
        :param pdf_standard: Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) 
        :type pdf_standard: str
        :param postaction_s3_filekey: - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
        :type postaction_s3_filekey: str
        :param postaction_s3_bucket: - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
        :type postaction_s3_bucket: str
        :param meta: - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
        :type meta: str
        :param var_async: - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory 
        :type var_async: str
        :param webhook_url: - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success 
        :type webhook_url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResponseSuccessPDFFile
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_pdf_from_html_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_pdf_from_html_with_http_info(create_pdf_from_html_request, export_type, expiration, output_format, filename, image_resample_res, is_cmyk, cloud_storage, pdf_standard, postaction_s3_filekey, postaction_s3_bucket, meta, var_async, webhook_url, **kwargs)  # noqa: E501

    @validate_arguments
    def create_pdf_from_html_with_http_info(self, create_pdf_from_html_request : CreatePdfFromHtmlRequest, export_type : Annotated[Optional[StrictStr], Field(description="- Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. ")] = None, expiration : Annotated[Optional[StrictInt], Field(description="- Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF ")] = None, output_format : Annotated[Optional[StrictStr], Field(description="- Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). ")] = None, filename : Annotated[Optional[StrictStr], Field(description="- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` ")] = None, image_resample_res : Annotated[Optional[StrictStr], Field(description="- We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. ")] = None, is_cmyk : Annotated[Optional[StrictStr], Field(description="- Use CMYK color profile, 1=true, 0=false. Default to '0' ")] = None, cloud_storage : Annotated[Optional[StrictInt], Field(description="- Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. ")] = None, pdf_standard : Annotated[Optional[StrictStr], Field(description="Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) ")] = None, postaction_s3_filekey : Annotated[Optional[StrictStr], Field(description="- This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter ")] = None, postaction_s3_bucket : Annotated[Optional[StrictStr], Field(description="- This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. ")] = None, meta : Annotated[Optional[StrictStr], Field(description="- Specify an external reference ID for your own reference. It appears in the `list-objects` API. ")] = None, var_async : Annotated[Optional[StrictStr], Field(description="- Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory ")] = None, webhook_url : Annotated[Optional[StrictStr], Field(description="- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a PDF from HTML  # noqa: E501

        - This endpoint creates a PDF file from HTML with JSON data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pdf_from_html_with_http_info(create_pdf_from_html_request, export_type, expiration, output_format, filename, image_resample_res, is_cmyk, cloud_storage, pdf_standard, postaction_s3_filekey, postaction_s3_bucket, meta, var_async, webhook_url, async_req=True)
        >>> result = thread.get()

        :param create_pdf_from_html_request: (required)
        :type create_pdf_from_html_request: CreatePdfFromHtmlRequest
        :param export_type: - Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. 
        :type export_type: str
        :param expiration: - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
        :type expiration: int
        :param output_format: - Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). 
        :type output_format: str
        :param filename: - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` 
        :type filename: str
        :param image_resample_res: - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. 
        :type image_resample_res: str
        :param is_cmyk: - Use CMYK color profile, 1=true, 0=false. Default to '0' 
        :type is_cmyk: str
        :param cloud_storage: - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
        :type cloud_storage: int
        :param pdf_standard: Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) 
        :type pdf_standard: str
        :param postaction_s3_filekey: - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
        :type postaction_s3_filekey: str
        :param postaction_s3_bucket: - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
        :type postaction_s3_bucket: str
        :param meta: - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
        :type meta: str
        :param var_async: - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory 
        :type var_async: str
        :param webhook_url: - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success 
        :type webhook_url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResponseSuccessPDFFile, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_pdf_from_html_request',
            'export_type',
            'expiration',
            'output_format',
            'filename',
            'image_resample_res',
            'is_cmyk',
            'cloud_storage',
            'pdf_standard',
            'postaction_s3_filekey',
            'postaction_s3_bucket',
            'meta',
            'var_async',
            'webhook_url'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pdf_from_html" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('export_type') is not None:  # noqa: E501
            _query_params.append(('export_type', _params['export_type']))

        if _params.get('expiration') is not None:  # noqa: E501
            _query_params.append(('expiration', _params['expiration']))

        if _params.get('output_format') is not None:  # noqa: E501
            _query_params.append(('output_format', _params['output_format']))

        if _params.get('filename') is not None:  # noqa: E501
            _query_params.append(('filename', _params['filename']))

        if _params.get('image_resample_res') is not None:  # noqa: E501
            _query_params.append(('image_resample_res', _params['image_resample_res']))

        if _params.get('is_cmyk') is not None:  # noqa: E501
            _query_params.append(('is_cmyk', _params['is_cmyk']))

        if _params.get('cloud_storage') is not None:  # noqa: E501
            _query_params.append(('cloud_storage', _params['cloud_storage']))

        if _params.get('pdf_standard') is not None:  # noqa: E501
            _query_params.append(('pdf_standard', _params['pdf_standard']))

        if _params.get('postaction_s3_filekey') is not None:  # noqa: E501
            _query_params.append(('postaction_s3_filekey', _params['postaction_s3_filekey']))

        if _params.get('postaction_s3_bucket') is not None:  # noqa: E501
            _query_params.append(('postaction_s3_bucket', _params['postaction_s3_bucket']))

        if _params.get('meta') is not None:  # noqa: E501
            _query_params.append(('meta', _params['meta']))

        if _params.get('var_async') is not None:  # noqa: E501
            _query_params.append(('async', _params['var_async']))

        if _params.get('webhook_url') is not None:  # noqa: E501
            _query_params.append(('webhook_url', _params['webhook_url']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_pdf_from_html_request'] is not None:
            _body_params = _params['create_pdf_from_html_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResponseSuccessPDFFile",
        }

        return self.api_client.call_api(
            '/v2/create-pdf-from-html', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_pdf_from_url(self, create_pdf_from_url_request : CreatePdfFromUrlRequest, export_type : Annotated[Optional[StrictStr], Field(description="- Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. ")] = None, expiration : Annotated[Optional[StrictInt], Field(description="- Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF ")] = None, output_format : Annotated[Optional[StrictStr], Field(description="- Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). ")] = None, filename : Annotated[Optional[StrictStr], Field(description="- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` ")] = None, image_resample_res : Annotated[Optional[StrictStr], Field(description="- We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. ")] = None, is_cmyk : Annotated[Optional[StrictStr], Field(description="- Use CMYK color profile, 1=true, 0=false. Default to '0' ")] = None, cloud_storage : Annotated[Optional[StrictInt], Field(description="- Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. ")] = None, pdf_standard : Annotated[Optional[StrictStr], Field(description="Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) ")] = None, postaction_s3_filekey : Annotated[Optional[StrictStr], Field(description="- This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter ")] = None, postaction_s3_bucket : Annotated[Optional[StrictStr], Field(description="- This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. ")] = None, meta : Annotated[Optional[StrictStr], Field(description="- Specify an external reference ID for your own reference. It appears in the `list-objects` API. ")] = None, var_async : Annotated[Optional[StrictStr], Field(description="- Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory ")] = None, webhook_url : Annotated[Optional[StrictStr], Field(description="- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success ")] = None, **kwargs) -> ResponseSuccessPDFFile:  # noqa: E501
        """Create a PDF from URL  # noqa: E501

        - This endpoint creates a PDF file from a URL   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pdf_from_url(create_pdf_from_url_request, export_type, expiration, output_format, filename, image_resample_res, is_cmyk, cloud_storage, pdf_standard, postaction_s3_filekey, postaction_s3_bucket, meta, var_async, webhook_url, async_req=True)
        >>> result = thread.get()

        :param create_pdf_from_url_request: (required)
        :type create_pdf_from_url_request: CreatePdfFromUrlRequest
        :param export_type: - Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. 
        :type export_type: str
        :param expiration: - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
        :type expiration: int
        :param output_format: - Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). 
        :type output_format: str
        :param filename: - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` 
        :type filename: str
        :param image_resample_res: - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. 
        :type image_resample_res: str
        :param is_cmyk: - Use CMYK color profile, 1=true, 0=false. Default to '0' 
        :type is_cmyk: str
        :param cloud_storage: - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
        :type cloud_storage: int
        :param pdf_standard: Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) 
        :type pdf_standard: str
        :param postaction_s3_filekey: - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
        :type postaction_s3_filekey: str
        :param postaction_s3_bucket: - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
        :type postaction_s3_bucket: str
        :param meta: - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
        :type meta: str
        :param var_async: - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory 
        :type var_async: str
        :param webhook_url: - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success 
        :type webhook_url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResponseSuccessPDFFile
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_pdf_from_url_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_pdf_from_url_with_http_info(create_pdf_from_url_request, export_type, expiration, output_format, filename, image_resample_res, is_cmyk, cloud_storage, pdf_standard, postaction_s3_filekey, postaction_s3_bucket, meta, var_async, webhook_url, **kwargs)  # noqa: E501

    @validate_arguments
    def create_pdf_from_url_with_http_info(self, create_pdf_from_url_request : CreatePdfFromUrlRequest, export_type : Annotated[Optional[StrictStr], Field(description="- Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. ")] = None, expiration : Annotated[Optional[StrictInt], Field(description="- Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF ")] = None, output_format : Annotated[Optional[StrictStr], Field(description="- Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). ")] = None, filename : Annotated[Optional[StrictStr], Field(description="- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` ")] = None, image_resample_res : Annotated[Optional[StrictStr], Field(description="- We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. ")] = None, is_cmyk : Annotated[Optional[StrictStr], Field(description="- Use CMYK color profile, 1=true, 0=false. Default to '0' ")] = None, cloud_storage : Annotated[Optional[StrictInt], Field(description="- Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. ")] = None, pdf_standard : Annotated[Optional[StrictStr], Field(description="Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) ")] = None, postaction_s3_filekey : Annotated[Optional[StrictStr], Field(description="- This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter ")] = None, postaction_s3_bucket : Annotated[Optional[StrictStr], Field(description="- This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. ")] = None, meta : Annotated[Optional[StrictStr], Field(description="- Specify an external reference ID for your own reference. It appears in the `list-objects` API. ")] = None, var_async : Annotated[Optional[StrictStr], Field(description="- Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory ")] = None, webhook_url : Annotated[Optional[StrictStr], Field(description="- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a PDF from URL  # noqa: E501

        - This endpoint creates a PDF file from a URL   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pdf_from_url_with_http_info(create_pdf_from_url_request, export_type, expiration, output_format, filename, image_resample_res, is_cmyk, cloud_storage, pdf_standard, postaction_s3_filekey, postaction_s3_bucket, meta, var_async, webhook_url, async_req=True)
        >>> result = thread.get()

        :param create_pdf_from_url_request: (required)
        :type create_pdf_from_url_request: CreatePdfFromUrlRequest
        :param export_type: - Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. 
        :type export_type: str
        :param expiration: - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
        :type expiration: int
        :param output_format: - Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). 
        :type output_format: str
        :param filename: - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` 
        :type filename: str
        :param image_resample_res: - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. 
        :type image_resample_res: str
        :param is_cmyk: - Use CMYK color profile, 1=true, 0=false. Default to '0' 
        :type is_cmyk: str
        :param cloud_storage: - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
        :type cloud_storage: int
        :param pdf_standard: Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) 
        :type pdf_standard: str
        :param postaction_s3_filekey: - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
        :type postaction_s3_filekey: str
        :param postaction_s3_bucket: - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
        :type postaction_s3_bucket: str
        :param meta: - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
        :type meta: str
        :param var_async: - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory 
        :type var_async: str
        :param webhook_url: - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success 
        :type webhook_url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResponseSuccessPDFFile, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_pdf_from_url_request',
            'export_type',
            'expiration',
            'output_format',
            'filename',
            'image_resample_res',
            'is_cmyk',
            'cloud_storage',
            'pdf_standard',
            'postaction_s3_filekey',
            'postaction_s3_bucket',
            'meta',
            'var_async',
            'webhook_url'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pdf_from_url" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('export_type') is not None:  # noqa: E501
            _query_params.append(('export_type', _params['export_type']))

        if _params.get('expiration') is not None:  # noqa: E501
            _query_params.append(('expiration', _params['expiration']))

        if _params.get('output_format') is not None:  # noqa: E501
            _query_params.append(('output_format', _params['output_format']))

        if _params.get('filename') is not None:  # noqa: E501
            _query_params.append(('filename', _params['filename']))

        if _params.get('image_resample_res') is not None:  # noqa: E501
            _query_params.append(('image_resample_res', _params['image_resample_res']))

        if _params.get('is_cmyk') is not None:  # noqa: E501
            _query_params.append(('is_cmyk', _params['is_cmyk']))

        if _params.get('cloud_storage') is not None:  # noqa: E501
            _query_params.append(('cloud_storage', _params['cloud_storage']))

        if _params.get('pdf_standard') is not None:  # noqa: E501
            _query_params.append(('pdf_standard', _params['pdf_standard']))

        if _params.get('postaction_s3_filekey') is not None:  # noqa: E501
            _query_params.append(('postaction_s3_filekey', _params['postaction_s3_filekey']))

        if _params.get('postaction_s3_bucket') is not None:  # noqa: E501
            _query_params.append(('postaction_s3_bucket', _params['postaction_s3_bucket']))

        if _params.get('meta') is not None:  # noqa: E501
            _query_params.append(('meta', _params['meta']))

        if _params.get('var_async') is not None:  # noqa: E501
            _query_params.append(('async', _params['var_async']))

        if _params.get('webhook_url') is not None:  # noqa: E501
            _query_params.append(('webhook_url', _params['webhook_url']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_pdf_from_url_request'] is not None:
            _body_params = _params['create_pdf_from_url_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResponseSuccessPDFFile",
        }

        return self.api_client.call_api(
            '/v2/create-pdf-from-url', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_object(self, transaction_ref : Annotated[StrictStr, Field(..., description="Object transaction reference")], **kwargs) -> ResponseSuccessDeleteObject:  # noqa: E501
        """Delete an Object  # noqa: E501

        Delete a PDF or an image from CDN and mark the transaction as deleted   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_object(transaction_ref, async_req=True)
        >>> result = thread.get()

        :param transaction_ref: Object transaction reference (required)
        :type transaction_ref: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResponseSuccessDeleteObject
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_object_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_object_with_http_info(transaction_ref, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_object_with_http_info(self, transaction_ref : Annotated[StrictStr, Field(..., description="Object transaction reference")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete an Object  # noqa: E501

        Delete a PDF or an image from CDN and mark the transaction as deleted   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_object_with_http_info(transaction_ref, async_req=True)
        >>> result = thread.get()

        :param transaction_ref: Object transaction reference (required)
        :type transaction_ref: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResponseSuccessDeleteObject, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'transaction_ref'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_object" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('transaction_ref') is not None:  # noqa: E501
            _query_params.append(('transaction_ref', _params['transaction_ref']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResponseSuccessDeleteObject",
        }

        return self.api_client.call_api(
            '/v2/delete-object', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_objects(self, limit : Annotated[Optional[StrictStr], Field(description="Retrieve only the number of records specified. Default to 300")] = None, offset : Annotated[Optional[StrictStr], Field(description="Offset is used to skip the number of records from the results. Default to 0")] = None, template_id : Annotated[Optional[StrictStr], Field(description="Filtered by template id")] = None, transaction_type : Annotated[Optional[StrictStr], Field(description="Filtered by transaction type, options are `PDF`, `JPEG` or `MERGE`")] = None, **kwargs) -> ResponseSuccessListObjects:  # noqa: E501
        """List Generated Objects  # noqa: E501

        Retrieves all the generated PDFs and images   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_objects(limit, offset, template_id, transaction_type, async_req=True)
        >>> result = thread.get()

        :param limit: Retrieve only the number of records specified. Default to 300
        :type limit: str
        :param offset: Offset is used to skip the number of records from the results. Default to 0
        :type offset: str
        :param template_id: Filtered by template id
        :type template_id: str
        :param transaction_type: Filtered by transaction type, options are `PDF`, `JPEG` or `MERGE`
        :type transaction_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResponseSuccessListObjects
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_objects_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_objects_with_http_info(limit, offset, template_id, transaction_type, **kwargs)  # noqa: E501

    @validate_arguments
    def list_objects_with_http_info(self, limit : Annotated[Optional[StrictStr], Field(description="Retrieve only the number of records specified. Default to 300")] = None, offset : Annotated[Optional[StrictStr], Field(description="Offset is used to skip the number of records from the results. Default to 0")] = None, template_id : Annotated[Optional[StrictStr], Field(description="Filtered by template id")] = None, transaction_type : Annotated[Optional[StrictStr], Field(description="Filtered by transaction type, options are `PDF`, `JPEG` or `MERGE`")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Generated Objects  # noqa: E501

        Retrieves all the generated PDFs and images   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_objects_with_http_info(limit, offset, template_id, transaction_type, async_req=True)
        >>> result = thread.get()

        :param limit: Retrieve only the number of records specified. Default to 300
        :type limit: str
        :param offset: Offset is used to skip the number of records from the results. Default to 0
        :type offset: str
        :param template_id: Filtered by template id
        :type template_id: str
        :param transaction_type: Filtered by transaction type, options are `PDF`, `JPEG` or `MERGE`
        :type transaction_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResponseSuccessListObjects, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'limit',
            'offset',
            'template_id',
            'transaction_type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_objects" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('template_id') is not None:  # noqa: E501
            _query_params.append(('template_id', _params['template_id']))

        if _params.get('transaction_type') is not None:  # noqa: E501
            _query_params.append(('transaction_type', _params['transaction_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResponseSuccessListObjects",
        }

        return self.api_client.call_api(
            '/v2/list-objects', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
