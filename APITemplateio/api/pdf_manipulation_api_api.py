# coding: utf-8

"""
    APITemplate.io API Reference

    # Introduction   Welcome to the [APITemplate.io](https://apitemplate.io) API v2!  APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).  This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.  Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.  **Steps to produce PDFs/Images** 1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it. 2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content. 3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.  # Authentication Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the \"API Integration\" section).  To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.   # Content Type and CORS  **Request Content-Type** The Content-Type for POST and GET requests is set to application/json.  **Cross-Origin Resource Sharing** This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.    # Regional API endpoint(s) A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.  The regions are:  | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       | | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       | | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       | | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |   Alternative Regions: | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       | | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       | | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |  ** Note: - Payload size applies to request and response - If \"export_type\" is set to `json` which output file that on AWS S3 doesn't have the limitation - If the \"export_type\" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region    Other regions are available on request, contact us at hello@apitemplate.io for more information  # Rate limiting Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.  However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests. 

    The version of the OpenAPI document: Version 2.0
    Contact: hello@apitemplate.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr

from typing import Optional

from APITemplateio.models.merge_pdfs_request import MergePdfsRequest
from APITemplateio.models.response_success_single_file import ResponseSuccessSingleFile

from APITemplateio.api_client import ApiClient
from APITemplateio.api_response import ApiResponse
from APITemplateio.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PDFManipulationAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def merge_pdfs(self, merge_pdfs_request : MergePdfsRequest, postaction_s3_filekey : Annotated[Optional[StrictStr], Field(description="- This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter ")] = None, postaction_s3_bucket : Annotated[Optional[StrictStr], Field(description="- This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. ")] = None, meta : Annotated[Optional[StrictStr], Field(description="- Specify an external reference ID for your own reference. It appears in the `list-objects` API. ")] = None, **kwargs) -> ResponseSuccessSingleFile:  # noqa: E501
        """Join/Merge multiple PDFs  # noqa: E501

        This endpoint merges/joins multiple PDF URLs into a single PDF file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.merge_pdfs(merge_pdfs_request, postaction_s3_filekey, postaction_s3_bucket, meta, async_req=True)
        >>> result = thread.get()

        :param merge_pdfs_request: (required)
        :type merge_pdfs_request: MergePdfsRequest
        :param postaction_s3_filekey: - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
        :type postaction_s3_filekey: str
        :param postaction_s3_bucket: - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
        :type postaction_s3_bucket: str
        :param meta: - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
        :type meta: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResponseSuccessSingleFile
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the merge_pdfs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.merge_pdfs_with_http_info(merge_pdfs_request, postaction_s3_filekey, postaction_s3_bucket, meta, **kwargs)  # noqa: E501

    @validate_arguments
    def merge_pdfs_with_http_info(self, merge_pdfs_request : MergePdfsRequest, postaction_s3_filekey : Annotated[Optional[StrictStr], Field(description="- This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter ")] = None, postaction_s3_bucket : Annotated[Optional[StrictStr], Field(description="- This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. ")] = None, meta : Annotated[Optional[StrictStr], Field(description="- Specify an external reference ID for your own reference. It appears in the `list-objects` API. ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Join/Merge multiple PDFs  # noqa: E501

        This endpoint merges/joins multiple PDF URLs into a single PDF file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.merge_pdfs_with_http_info(merge_pdfs_request, postaction_s3_filekey, postaction_s3_bucket, meta, async_req=True)
        >>> result = thread.get()

        :param merge_pdfs_request: (required)
        :type merge_pdfs_request: MergePdfsRequest
        :param postaction_s3_filekey: - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
        :type postaction_s3_filekey: str
        :param postaction_s3_bucket: - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
        :type postaction_s3_bucket: str
        :param meta: - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
        :type meta: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResponseSuccessSingleFile, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merge_pdfs_request',
            'postaction_s3_filekey',
            'postaction_s3_bucket',
            'meta'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method merge_pdfs" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('postaction_s3_filekey') is not None:  # noqa: E501
            _query_params.append(('postaction_s3_filekey', _params['postaction_s3_filekey']))

        if _params.get('postaction_s3_bucket') is not None:  # noqa: E501
            _query_params.append(('postaction_s3_bucket', _params['postaction_s3_bucket']))

        if _params.get('meta') is not None:  # noqa: E501
            _query_params.append(('meta', _params['meta']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['merge_pdfs_request'] is not None:
            _body_params = _params['merge_pdfs_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResponseSuccessSingleFile",
        }

        return self.api_client.call_api(
            '/v2/merge-pdfs', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
